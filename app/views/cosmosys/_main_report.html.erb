<% content_for :header_tags do %>
  <%= stylesheet_link_tag 'cosmosys', :plugin => 'cosmosys' %>
  <%= stylesheet_link_tag 'cosmosys', :plugin => 'cosmosys', :media => "print" %>
<% end %>
<%
    # Helper functions ########################################################

    def truthy?(value, nilistrue = false)
      if (nilistrue and value == nil) then
        return true
      end
      options = [1, "1", true, "true", "t","yes","y"]
      return options.include?(value)
    end

    def calculate_heading(showchap, i)
      classdiv = i.csys.is_chapter? ? "cSysParentIssue" : "cSysIssue"

      chapstr = showchap ? i.chapter_str : ""

      chapstr += " " if showchap unless i.csys.is_chapter?

      chapstr += i.csys.get_identifier unless i.csys.is_chapter?

      chapstr += ':' if showchap

      return chapstr,classdiv
    end

    def calculate_complete_title(showchap, i, chapstr)
      if showchap then
        link_to chapstr, issue_path(i.id)
      else
        chapstr
      end
    end

    def process_text(txt)
      if txt != nil then
        descr = txt.split('')
        ret = ""
        prevchar = nil
        nuevalinea = false
        descr.each{ |c|
          if prevchar == "\r" then
            #ret += "€"
          end
          if prevchar == "\n" then
            #ret += "ł"
            if not nuevalinea then
              if c == "\r" or c == "\n" or c == "-" or c == "|" or c.to_i.to_s == c then
                nuevalinea = true
              else
                ret += "\r\n"
              end
            else
              if c != "\r" and c != "\n" then
                nuevalinea = false
              end
            end
          end
          ret += c
          prevchar = c
        }
        return ret
      else
        return ""
      end
    end

    def get_project_custom_YAML_field(project, field_name)
      # Find the custom field by name
      custom_field = ProjectCustomField.find_by_name(field_name)

      # Return early if the custom field does not exist
      return nil if custom_field == nil

      custom_values = project.custom_values.find_by(custom_field_id: custom_field.id)

      # Return early if the custom value does not exist
      return nil if custom_values == nil

      begin
        metadata_yaml = YAML.load(custom_values.value)
      rescue Exception
        puts "Error: could not validate the YAML metadata descriptor, continuing without it"
        metadata_yaml = nil # Deal with scope gotchas
      end

      # Return early if the metadata yaml is nil
      return nil if metadata_yaml == nil

      metadata_dict = metadata_yaml.keys.map { |metadatum_key|
        metadatum_descriptor = metadata_yaml[metadatum_key]

        # Check if there is a descriptor, if parsed probably it should always
        # contain something, hence the warning if it is nil
        if (metadatum_descriptor == nil) then
          puts "warning: No metadatum descriptor for " + metadatum_key

          # Setting the default visibility and labels
          metadatum_descriptor = {
            "visible" => false,
            "label" => metadatum_key
          }
        else
          metadatum_descriptor["visible"] = false if metadatum_descriptor["visible"] == nil
          metadatum_descriptor["label"] = metadatum_key.to_s if metadatum_descriptor["label"] == nil
        end

        [metadatum_key, metadatum_descriptor]
      }.to_h

      return metadata_dict
    end


    # Flag handling ###########################################################

    flags = {}
    # Reduce the atom list and store the value in the flags variable:
    # Txinto 2024-02-18 I've undertood this is the correct way to set the default values for the params
    [:chapnums].each {|key| flags[key] = truthy?(params[key], true)}
    [:depdiag].each {|key| flags[key] = truthy?(params[key], false)}
    #####################################################################################################
    #                                                                                                   #
    [:compl, :refdoc, :appldoc].each {|key| flags[key] = truthy?(params[key], false)}                   #
    #                                                                                                   #
    #####################################################################################################

    cfdepgraph = IssueCustomField.find_by_name("depGrahInReports")            #
    metadata_dict = get_project_custom_YAML_field(@project, "csReportMetadata")
%>
<%
# This is a recursive lambda that draws the items and their children.
draw_items = lambda {|item, recursion, current_level|
  chapstr, classdiv = calculate_heading(flags[:chapnums], item)
  title = item.subject
%>
<div class="<%= classdiv %>">
  <<%= if current_level + 1 > 6 then "span"; else "h" + (current_level + 1).to_s end %> class="heading_<%= current_level %>"><%= calculate_complete_title(flags[:chapnums], item, chapstr) %> <%= title %></<%= if current_level + 1 > 6 then "span"; else "h" + (current_level + 1).to_s end %>>
    <div class="<%= classdiv %>descr"><%= textilizable(process_text(item.description),{:object => item}) %></div>
    <% #TODO: BEGIN check if there is a better way to solve https://csys.cosmobots.eu:8443/issues/6613 %>
    <br/>
    <% #TODO: END check if there is a better way to solve https://csys.cosmobots.eu:8443/issues/6613 %>
    <%
    if (item.csys.shall_show_dependences?) then
      imagesrc = "/cosmosys_issues/"+item.id.to_s+"/dep_gv.svg"
      if flags[:depdiag] then
        show_this_image = false
        thisdepgraphflag = item.custom_field_values.select{|a| a.custom_field_id == cfdepgraph.id }.first
        if (thisdepgraphflag != nil) then
          if (thisdepgraphflag.value == nil) then
            thisdepgraphflag.value = cfdepgraph.default_value
            item.save
          end
          if (thisdepgraphflag.value == 'Include') then
            show_this_image = true
          else
            if (thisdepgraphflag.value == 'Include if has relations') then
              show_this_image = (item.relations.size > 0)
            end
          end
        else
          show_this_image = (item.relations.size > 0)
        end

        if (show_this_image) then
        %><figure><a href="<%= imagesrc %>" ><img src="<%= imagesrc %>" alt="Dependence diagram"></a></figure><%
        end
      end
    end

%>
<p>
<table style="width:50%;border-style:none !important;table-layout:auto; margin-right:0px; margin-left:auto">
<%                                                                                  #


if (metadata_dict != nil) then
  metadata_dict.keys.each { |metadatum_key|

    label_to_display = metadata_dict[metadatum_key]["label"]
    default_visibility = metadata_dict[metadatum_key]["visible"]


    if default_visibility then

      # parsing the key to know where to obtain the metadatum
      done = false

      if !done and metadatum_key == "assigned" then
        value_to_display = item.assigned_to
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.name
        end
      end

      if !done and metadatum_key == "status" then
        value_to_display = item.status
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.name
        end
      end

      if !done and metadatum_key == "version" then
        value_to_display = item.fixed_version
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.name
        end
      end


      if !done and metadatum_key == "priority" then
        value_to_display = item.priority
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.name
        end
      end


      if !done and metadatum_key == "start_date" then
        value_to_display = item.start_date
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.to_s
        end
      end


      if !done and metadatum_key == "due_date" then
        value_to_display = item.due_date
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.to_s
        end
      end


      if !done and metadatum_key == "done_ratio" && item.tracker.core_fields.include?("done_ratio")  then
        value_to_display = item.done_ratio
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.to_s
        end
      end


      if !done and metadatum_key == "estimated_hours" then
        value_to_display = item.estimated_hours
        if (value_to_display != nil) then
          value_to_display_str = value_to_display.to_s
        end
      end

      if !done then
        # Maybe the value is a custom_value
        # cfi = IssueCustomField.find_by_name(metadatum_key)
        cvis = item.custom_field_values
        if (cvis != nil) then
          value_to_display = cvis.detect { |cvi| cvi.custom_field.name == metadatum_key }
          if (value_to_display != nil) then
            if value_to_display.value.kind_of?(Array) then
              value_to_display_str = value_to_display.value.join(', ')
            else
              value_to_display_str = value_to_display.value.to_s
            end


          end
        else
          puts "The issue " + item.id + ": " + item.subject + " does not have custom_field_values"
        end
      end
      if value_to_display_str != nil and value_to_display_str != "" then
      %>
      <tr>
      <th style="border-style:none !important;width:1px;white-space:nowrap"><%= label_to_display%></th>
      <td style="width:auto;border-style:none !important"><%= textilizable(process_text(value_to_display_str))%></td>
      </tr>
      <%
      end
    end
  }
end

#
%>
</table></p>
<br/>
</div><%
    excluded_titles = [
      "Applicable documents",
      "Reference documents",
      "Compliance documents",
      "Compliance matrix"
    ]
    if not excluded_titles.include?(item.subject) then
      item.children.select{|obj| obj.csys.shall_draw}.sort_by{|obj| obj.chapter_order}.each {|subitem|
        recursion.(subitem, recursion,current_level+1)
      }
    else %>
      <%= render partial: "cosmosys/excluded_titles/" + item.subject.gsub(" ", "_").downcase, locals: { item: item } %>
    <%
    end
}
%>

<%= render partial: "cosmosys/report_toolbar", locals: { flags: flags, metadata_dict: metadata_dict } %>
<div class="<%= "cSysProject" %>">
  <% if flags[:chapnums] %><h1><%= @project.csys.code %>: <%= @project.name %></h1><% end %>
  <%
  roots = @project.issues.select{|obj| obj.parent == nil and obj.csys.shall_draw}.sort_by{|obj| obj.chapter_order}
    if roots.size == 0 then
      roots = @project.issues.select { |n| n.parent.project != @project and n.csys.shall_draw}
    end

    excluded_titles = [
      "Applicable documents",
      "Reference documents",
      "Compliance documents",
      "Compliance matrix"
    ]

    if not excluded_titles.include?(title) then
      roots.each {|i| draw_items.(i, draw_items,1)}
    else    
    %>
      <%= render partial: "cosmosys/excluded_titles/" + title.gsub(" ", "_").downcase, locals: { item: item } %>
    <%
    end
  %>
</div>
<%= render partial: "cosmosys/download_report_script" %>
