<script>
const getBase64StringFromDataURL = (dataURL) =>
  dataURL.replace('data:', '').replace(/^.+,/, '');

function inlineStyles(nodeElement) {
    if (!nodeElement || nodeElement.nodeType !== 1) return; // Skip if not an element node

    let computedStyle = window.getComputedStyle(nodeElement);

    // List of styles to exclude
    const excludeStyles = [
        'text-align-last',
        'text-anchor',
        'text-decoration',
        'text-decoration-color',
        'text-decoration-line',
        'text-decoration-skip-ink',
        'text-decoration-style',
        'font-family',
        'font-size',
        'list-style-type',
        'font-variant-numeric',
        'unicode-bidi'

    ];

    // If the element is an img, figure, or div, add width and height to the exclude list
    let tagName = nodeElement.tagName.toLowerCase();
    if (tagName === 'a' || tagName === 'img' || tagName === 'figure' || tagName === 'div') {
        excludeStyles.push('width', 'height');
    }

    const pxToPtRatio = 0.68; // 1 px = 0.68 pt

    let styleStr = '';
    for (let i = 0; i < computedStyle.length; i++) {
        let prop = computedStyle[i];
        // Skip if the property is in the exclude list
        if (excludeStyles.includes(prop)) continue;

        let value = computedStyle.getPropertyValue(prop);

        // If the value is in px and the property is font-size, convert to pt
        if (value.includes('px') && prop === 'font-size') {
            value = parseFloat(value) * pxToPtRatio + 'pt';
        }

        styleStr += `${prop}:${value};`;
    }

    nodeElement.setAttribute('style', styleStr);

    // Recurse through children
    Array.from(nodeElement.children).forEach(child => inlineStyles(child));
}

function inlineSomeStyles(nodeElement) {
    if (!nodeElement || nodeElement.nodeType !== 1) return; // Skip if not an element node

    let computedStyle = window.getComputedStyle(nodeElement);

    // List of styles to exclude
    const includeStyles = [
        'text-align',
    ];

    // If the element is an img, figure, or div, add width and height to the exclude list
    let tagName = nodeElement.tagName.toLowerCase();
    if (tagName === 'a') {
      let styleStr = '';
      for (let i = 0; i < computedStyle.length; i++) {
          let prop = computedStyle[i];
          // Skip if the property is in the exclude list
          if (!includeStyles.includes(prop)) continue;

          let value = computedStyle.getPropertyValue(prop);

          // If the value is in px and the property is font-size, convert to pt
          if (value.includes('px') && prop === 'font-size') {
              value = parseFloat(value) * pxToPtRatio + 'pt';
          }
          styleStr += `${prop}:${value};`;
      }
      nodeElement.setAttribute('style', styleStr);
    }

    // Recurse through children
    Array.from(nodeElement.children).forEach(child => inlineSomeStyles(child));
}


function convertHeadingClassToElement(element) {
  let elements = element.querySelectorAll("[class*='heading_']");

  elements.forEach((elem) => {
    let match = elem.className.match(/heading_(\d+)/);

    if (match) {
      let num = match[1];

      let newElem = document.createElement(num > 6 ? "h6" : 'h' + num);
      newElem.addClass = "heading_" + num;

      for (let attr of elem.attributes) {
        newElem.setAttribute(attr.name, attr.value);
      }

      while (elem.firstChild) {
        if (elem.firstElementChild && elem.firstElementChild.tagName.toLowerCase() == "a") {
          elem.firstElementChild.remove();
        } else {
          newElem.appendChild(elem.firstChild);
        };
      }

      elem.parentNode.replaceChild(newElem, elem);
    }
  });
}

function applyImageStyles(imageElement, maxWidth, maxHeight) {
  imageElement.setAttribute('style', "");

  let naturalWidth = imageElement.naturalWidth;
  let naturalHeight = imageElement.naturalHeight;
  let newHeight = naturalHeight;
  let newWidth = naturalWidth;

  if (newWidth > maxWidth) {
    newWidth = maxWidth;
    newHeight = Math.round(newWidth * (naturalHeight / naturalWidth));
  }

  if (newHeight > maxHeight){
    newHeight = maxHeight;
    newWidth = Math.round(newHeight * (naturalWidth / naturalHeight));
  }

  imageElement.style.width = newWidth + 'px';
  imageElement.style.height = newHeight + 'px';

  return imageElement;
}

function applyTableStylesToAllTables(containerElement) {
  let tables = containerElement.querySelectorAll('table');

  tables.forEach(table => {
    table.style.borderCollapse = 'collapse';
    table.style.borderSpacing = '0';
    table.style.border = '1px solid #000';

    let rows = table.querySelectorAll('tr');
    rows.forEach(row => {
      let cells = row.querySelectorAll('td, th');
      cells.forEach(cell => {
        cell.style.border = '1px solid #000';
      });
    });
  });
}

async function offerDownloadFile(identifier, title, code, file_or_blob, extension, callback) {
  // Create an object URL for the blob or file and create a link element to trigger the download
  let link = document.createElement('a');
  link.href = window.URL.createObjectURL(file_or_blob);
  link.download = title + "." + extension; // Name of the downloaded file
  link.style.display = 'none';

  // It needs to be added to the DOM so it can be clicked
  document.body.appendChild(link);
  link.click();

  // To make this work on Firefox we need to wait
  // a little while before removing it.
  setTimeout(() => {
    URL.revokeObjectURL(link.href);
    link.parentNode.removeChild(link);
    callback();
  }, 0);
}

async function downloadFile(identifier, title, code, file, exportFormat, callback) {
  if (exportFormat == "html") {
    offerDownloadFile(identifier, title, code, file, exportFormat, callback);
  } else {
    let formData = new FormData();
    formData.append('file', file);

    let xhr = new XMLHttpRequest();
    xhr.open('POST', '/cosmosys/convert_to/' + exportFormat + "/"+ identifier + "/" + code + "/"+ title, true);

    // When the request is loaded
    xhr.onload = function () {
      if (xhr.status >= 200 && xhr.status < 300) {
        // Convert the response to a Blob
        let blob = new Blob([xhr.response], { type: xhr.getResponseHeader('Content-Type') });

        offerDownloadFile(identifier, title, code, blob, exportFormat, callback);
      } else {
        // Handle the error
        console.error('Server responded with an error:', xhr.statusText);
      }
    };

    // Setting the response type to 'blob' as we are expecting a file
    xhr.responseType = 'blob';

    // Handling any error with the request
    xhr.onerror = function () {
      console.error('Request failed.');
    };

    // Sending the FormData with the file
    xhr.send(formData);
  }
}

async function downloadReport(identifier, title, code, maxWidth, maxHeight) {
  let bakupElement = document.querySelector('.cSysProject').cloneNode(true);
  let projectElement = document.querySelector('.cSysProject')

  // Uncomment this to enable embedding all styles as inline attributes.
  // inlineStyles(projectElement);
  inlineSomeStyles(projectElement);

  convertHeadingClassToElement(projectElement);
  applyTableStylesToAllTables(projectElement);

  let page_style_elements = document.querySelectorAll('style, link[rel="stylesheet"]');
  var page_styles = Array.apply(null, Array(page_style_elements.length)).map(function () {})
  let style_promises = [];

  for (var i = 0; i < page_style_elements.length; i++){
     style_or_link = page_style_elements[i];
     let index = i;
     if(style_or_link.tagName == "STYLE"){
       page_styles.splice(index, 1, style_or_link.innerText);
     } else {
       style_promises.push(fetch(style_or_link.href)
         .then((res) => res.blob())
         .then((blob) => {
           return new Promise((resolve, reject) => {
             const reader = new FileReader();
             reader.onloadend = () => {
               resolve(reader.result)
             };
             reader.onerror = reject;
             reader.readAsText(blob);
           });
         })
         .then((text) => {
           page_styles.splice(index, 1, text);
           return text;
         }))
     }
  }

  let image_promises = [].map.call(projectElement.querySelectorAll('img'), (img) => {
    return fetch(img.src)
      .then((res) => res.blob())
      .then((blob) => {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            resolve(reader.result)
          };
          reader.onerror = reject;
          reader.readAsDataURL(blob);
        });
      })
      .then((dataURL) => {
        img.src = dataURL;
        applyImageStyles(img, maxWidth, maxHeight);
      });
  });

  let link_promises = [].map.call(projectElement.querySelectorAll('[href]'), (link) => {
    const r = new RegExp('^(?:[a-z+]+:)?//', 'i');

    return new Promise((resolve, reject) => {
      let href = link.getAttribute('href');
      if (!r.test(href)) {
          link.setAttribute('href',
              (href.indexOf('/')) === 0 ?
              document.location.origin + href :
              document.location.href + '/' + link.getAttribute('href')
            );
      }
      return resolve(link.href)
    });
  });

  let promises = image_promises.concat(link_promises).concat(style_promises);

  Promise.allSettled(promises)
    .then(() => {
      projectElement.querySelectorAll('button').forEach((button) => {button.remove();});
    })
    .then(async() => {
      let html = projectElement.innerHTML;
      let head = '<!DOCTYPE html><head><meta charset="utf-8" /><title>' + title + '</title><style>' + page_styles.join("\n") + '</style></head>';
      html = head + '<body><div class="cSysProject">' + html + '</div></body>';

      let file = new File([html], title + ".html");

      let selectElement = document.querySelector('select[name="format"]');
      let exportFormat = selectElement.value;

      downloadFile(identifier, title, code, file, exportFormat, () => {
        projectElement.parentElement.insertBefore(bakupElement, projectElement);
        projectElement.parentNode.removeChild(projectElement);
      });
    })

}
</script>
